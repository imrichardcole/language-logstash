'scopeName': 'source.logstash'
'fileTypes': [
  'logstash.conf'
]
'name': 'Logstash'

'patterns': [
  {
    match: "^(input|filter|codec|output)"
    name: "entity.name.type.class.logstash"
  }
  {
    comment: "comments"
    match: "^(\\s*)?#.+"
    name: "comment.line.number-sign.logstash"
  }
  {
    comment: "single quoted string values"
    match: "(\')(.+?)[^\']*(\')"
    name: "string.text.logstash"
  }
  {
    comment: "double quoted string values"
    match: "(\")(.+?)[^\"]*(\")"
    name: "string.text.logstash"
  }
  {
    captures:
      "2":
        name: "entity.name.function.logstash"
      "5":
        name: "variable.text.logstash"
      "7":
        name: "keyword.operator.logstash"
    comment: "functions: types of inputs, codecs, filters and outputs"
    match: "^(\\s*)(\\w+)(\\s*{)(\\s*)?(\\w+)?(\\s*)?(=>)?(\\s*)?"
    name: "text.logstash"
  }
  {
    captures:
      "2":
        name: "variable.text.logstash"
      "4":
        name: "keyword.operator.logstash"
      "6":
        name: "constant.numeric.logstash"
    comment: "number variable"
    match: "^(\\s*)?(\\w+)(\\s*)?(=>)(\\s*)?(\\d+)"
    name: "keyword.text.logstash"
  }
  {
    captures:
      "2":
        name: "variable.text.logstash"
      "4":
        name: "keyword.operator.logstash"
    comment: "double quoted string variable"
    match: "^(\\s*)?(\\w+)(\\s*)?(=>)(\\s*)?"
    name: "keyword.text.logstash"
  }
  {
    captures:
      "1":
        name: "keyword.control.logstash"
      "4":
        name: "entity.name.function.logstash"
      "7":
        name: "keyword.operator.logstash"
    comment: "if/else if statements"
    match: "(if|else if|else)(\\s+)(\\[)(\\w*)(\\])(\\s*)(==|!=|<|>|<=|>=|=~|!~|in|not in|!)"
    name: "text.logstash"
  }
  {
    captures:
      "1":
        name: "keyword.control.logstash"
      "3":
        name: "string.text.logstash"
      "5":
        name: "keyword.operator.logstash"
      "8":
        name: "entity.name.function.logstash"
    comment: "if/else from bug reports"
    match: "(if)(\\s+)(\"\\w*\")(\\s+)(in)(\\s+)(\\[(\\w*)\\])"
  }
  {
    captures:
      "1":
        name: "keyword.control.logstash"
    comment: "else statements"
    match: "(else)(\\s+)({)"
    name: "text.logstash"
  }
]
